// autogenerated using string template jammerenum.txt

package %s;

import java.nio.ByteBuffer;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

import edu.nps.moves.dis7.pdus.*;

/** DIS Jammer Enumerations, marshal size 8 bits*/
public enum %s implements edu.nps.moves.dis7.%s
{
    %s;

    private byte value;
    private final String description;

    /** Enumeration constructor */
    %s(int value, String description)
    {
        this.value = (byte)value;
        this.description = description;
    }

    /** Provide enumeration value
      * @return byte value */
    public byte getValue()
    {
        return value;
    }

    /** Provide enumeration description
     * @return description
     */
    public String getDescription()
    {
        return description;
    }

    /** Provide enumeration description
     * @param numeric value
     * @return enumeration corresponding to numeric value
     */
    public static %s getEnumerationForValue(int i)
    {
       for(%s val: values()) {
          if(val.getValue()==i)
              return val;
       }
       System.out.flush(); // ensure contiguous console outputs
       System.err.println("No enumeration found for value " + i + " of enumeration %s");
       System.err.flush(); // ensure contiguous console outputs
       return null;
    }

    /** Marshal value to DataOutputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dos DataOutputStream for output */
    @Override
    public void marshal(DataOutputStream dos)
    {
        try {
            dos.writeByte(getValue());
        }
        catch(IOException ex) 
        {
            System.out.flush(); // ensure contiguous console outputs
            System.err.println(ex.getClass().getSimpleName()+": "+ex.getMessage());
            System.err.flush(); // ensure contiguous console outputs
        }
    }

    /** Unmarshal value from DataInputStream
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param dis DataInputStream for input
     * @return value if provided, otherwise 1 */
    @Override
    public int unmarshal(DataInputStream dis)
    {
        try {
            value = dis.readByte();
        }
        catch(IOException ex) {
            showError(ex);
        }
        return 1;
    } 

    /** Marshal value to ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for output */
    @Override
    public void marshal(ByteBuffer byteBuffer)
    {
        try {
            byteBuffer.put(getValue());
        }
       catch(Exception ex) {
            showError(ex);
        }
    }

    /** Unmarshal value from ByteBuffer
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @param byteBuffer ByteBuffer for input
     * @return value if provided, otherwise 1 */
    @Override
    public int unmarshal(ByteBuffer byteBuffer)
    {
        try {
            value = byteBuffer.get();
        }
        catch(Exception ex) {
            showError(ex);
        }
        return 1;
    }
    /**
     * Returns size of this serialized (marshalled) object in bytes
     * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
     * @return serialized size in bytes
     */
    @Override
    public int getMarshalledSize()
    {
        return 1; // 8 bits
    }

    private void showError(Exception ex)
    {
        System.out.flush(); // ensure contiguous console outputs
        System.err.println(ex.getClass().getSimpleName()+": "+ex.getMessage());
        System.err.flush(); // ensure contiguous console outputs
    }
}
